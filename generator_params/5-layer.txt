Linear(in_features=100, out_features=8192, bias=True) ----> torch.Size([50, 8192])

 View() ----> torch.Size([50, 128, 8, 8])

 BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ----> torch.Size([50, 128, 8, 8])
/usr/local/lib/python3.7/site-packages/torch/nn/modules/upsampling.py:129: UserWarning: nn.Upsample is deprecated. Use nn.functional.interpolate instead.
  warnings.warn("nn.{} is deprecated. Use nn.functional.interpolate instead.".format(self.name))

 Upsample(scale_factor=2, mode=nearest) ----> torch.Size([50, 128, 16, 16])

 Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) ----> torch.Size([50, 128, 16, 16])

 BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ----> torch.Size([50, 128, 16, 16])

 LeakyReLU(negative_slope=0.2, inplace) ----> torch.Size([50, 128, 16, 16])

 Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) ----> torch.Size([50, 128, 16, 16])

 BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ----> torch.Size([50, 128, 16, 16])

 LeakyReLU(negative_slope=0.2, inplace) ----> torch.Size([50, 128, 16, 16])

 Upsample(scale_factor=2, mode=nearest) ----> torch.Size([50, 128, 32, 32])

 Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) ----> torch.Size([50, 64, 32, 32])

 BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ----> torch.Size([50, 64, 32, 32])

 LeakyReLU(negative_slope=0.2, inplace) ----> torch.Size([50, 64, 32, 32])

 Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) ----> torch.Size([50, 64, 32, 32])

 BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ----> torch.Size([50, 64, 32, 32])

 LeakyReLU(negative_slope=0.2, inplace) ----> torch.Size([50, 64, 32, 32])

 Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) ----> torch.Size([50, 3, 32, 32])

 BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ----> torch.Size([50, 3, 32, 32])
torch.Size([50, 3, 32, 32])
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Linear-1              [-1, 1, 8192]         827,392
              View-2            [-1, 128, 8, 8]               0
       BatchNorm2d-3            [-1, 128, 8, 8]             256
          Upsample-4          [-1, 128, 16, 16]               0
            Conv2d-5          [-1, 128, 16, 16]         147,584
       BatchNorm2d-6          [-1, 128, 16, 16]             256
         LeakyReLU-7          [-1, 128, 16, 16]               0
            Conv2d-8          [-1, 128, 16, 16]         147,584
       BatchNorm2d-9          [-1, 128, 16, 16]             256
        LeakyReLU-10          [-1, 128, 16, 16]               0
         Upsample-11          [-1, 128, 32, 32]               0
           Conv2d-12           [-1, 64, 32, 32]          73,792
      BatchNorm2d-13           [-1, 64, 32, 32]             128
        LeakyReLU-14           [-1, 64, 32, 32]               0
           Conv2d-15           [-1, 64, 32, 32]          36,928
      BatchNorm2d-16           [-1, 64, 32, 32]             128
        LeakyReLU-17           [-1, 64, 32, 32]               0
           Conv2d-18            [-1, 3, 32, 32]           1,731
      BatchNorm2d-19            [-1, 3, 32, 32]               6
================================================================
Total params: 1,236,041
Trainable params: 1,236,041
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.00
Forward/backward pass size (MB): 5.98
Params size (MB): 4.72
Estimated Total Size (MB): 10.70
----------------------------------------------------------------